# -*- encoding: utf-8 -*-

###################################################################################################################################################################################
## DESCRIPCIÓN:
###################################################################################################################################################################################

# Modúlo con la implementación de los validadores de CEIC Suite

###################################################################################################################################################################################
## AUTORES:
###################################################################################################################################################################################

# Carlos Serrada, cserradag96@gmail.com
# Christian Oliveros, 01christianol01@gmail.com
# Pablo Betancourt, pablodbc30@gmail.com

###################################################################################################################################################################################
## DEPENDENCIAS:
###################################################################################################################################################################################

import re

"""
Método para validad números telefonicos
	Retorna True:
		* Si el string recibido es un número telefónico válido
	Retorna False:
		* Si el string recibido NO es un número telefónico válido
"""
def validatePhoneNumber(phone):
	start58 = "^(\(\+58\)|\+58)"
	PhoneCode = "((4(1|2)(4|6))|412|2\d{2})"
	pattern = re.compile("((" + (start58 + PhoneCode) + "|(^(0"+PhoneCode+")|\(0"+PhoneCode+"\))" + ")(\-?\d{3}\-?\d{4})$)")
	if pattern.match(phone):
		return True
	else:
		return False